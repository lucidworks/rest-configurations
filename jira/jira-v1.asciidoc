== Jira REST Configuration

This documentation describes aspects of the Jira REST `jira-v1.json` file configuration such as the authentication methods, data crawled and retrieved, pagination information, variables used, and endpoints used. Terminology is also provided as a reference.

The list of data the REST connector crawls using the jira REST configuration is:

* Projects 
* Comments
* Worklogs  
* Attachments


== Authentication methods

The Jira REST configuration supports:

* Basic Authentication using the username and password from an Atlassian account. For more information, see link:https://developer.atlassian.com/cloud/confluence/basic-auth-for-rest-apis/[Basic auth for REST APIs | Atlassian Developer^].

* API Token. For information about how to create a new API token, see link:https://id.atlassian.com/manage/api-tokens[API Tokens | Atlassian ID^].


== Supported crawl options

The Jira REST configuration supports the following crawl options:

* Full crawl

* Recrawl that uses the `rely on the strayContentDeletion` parameter


== Pagination information

This recipe is configured to use pagination by batch size. 

* The `${LW_INDEX_START}` variable is set to zero because the Atlassian pagination is zero-index-based. 

* The `${LW_BATCH_SIZE}` variable is set to `20`, but can be adjusted to any value.

* The pagination `stop` condition is set to a `results` response object set `[]`. Pagination stops when this condition is met.


== Variables used

The Jira REST configuration variables used are:

* `${LW_BATCH_SIZE}` - This variable is used to set the `limit` query parameter, which controls the number of results that are returned in the response for both `blogpost` and `pages`.

* `${LW_INDEX_START}` - This variable is used to set the `start` query parameter, which is used to traverse the pagination. Jira pagination is zero-index-based. This means the first page number is 0.

* `${LW_PARENT_DATA_KEY}` - This variable is used to access a value of the response from the `main request` to use in an `additional request`. The jira use case indicates this variable can be added the URL to execute a GET request to retrieve comments for blogposts and pages.


== Endpoints to configure with the Jira REST connector

The following table describes the jira REST connector endpoints.

*Notes:*

The list of objects is retrieved in batches. Objects include spaces, pages, blogs, and comments. The default number of batch items retrieved is 25. You can configure the query limit to retrieve more objects. The maximum value to retrieve is 250.


[options="header",cols="1m,1,1m,1,1"]
|=======================
|Endpoint|HTTP operation |Query parameter |Description |Request type

|/rest/api/2/search|GET    |fields=assignee,issuetype,priority,project,reporter,status,summary,updated,attachment&startAt=1&maxResults=50|Returns all jira issues with attachments.|Root Request
|/rest/api/2/issue/${LW_PARENT_DATA_KEY}/comment|GET|startAt=0&maxResult=50|Returns all comments using the issue id. The value of `id` from the main request needs to be assigned to the `${LW_PARENT_DATA_KEY}` variable so the additional feature can insert that value when building the GET URL.  |Child Request
|/rest/api/2/issue/${LW_PARENT_DATA_KEY}/worklog | GET |startAt=0&maxResult=50 |Returns all worklogs using the issue id. The value of `id` from the main request needs to be assigned to the `${LW_PARENT_DATA_KEY}` variable so the additional feature can insert that value when building the GET URL.|Child Request
|/rest/api/2/attachment/content/${LW_PARENT_DATA_KEY}|GET|-|Use root response containing attachment Id's to retrieve attachments. The following jsonpath is used to retrieve the attachment id's `issues[*].fields.attachment[*]` |Child Request
|=======================


== Terminology

The following terms are provided as a reference.

[options="header",cols="1s,1"]
|=======================

|Term|Description
|Service Endpoints|The list of service endpoints from which the data is retrieved. Each service endpoint configures a root endpoint request.
|Root Request|The type of request to retrieve data the root data objects.
|Child Request|The type of request to retrieve additional information for the root data objects. It iterates over root data objects, and performs a request for each one.
|Root Response Mapping|Defines the mapping between the response and data objects to be indexed.
|Child Response Mapping |Defines the mapping between the child response and child data objects to be indexed.
|Data Path|The path to access a specific data object within a response. For example, to access a list of elements named with key `objects`, the DataPath would be `objects`. If not provided, the entire response body will be indexed.
|DATA ID|The identifier key for the data object where the value is the solr-document's ID. If not provided, a random universally unique identifier (UUID) will be used.
|Parent Data Key|Key to extract data from the root/parent response used in the subsequent request. The extracted value is used to replace the ${LW_PARENT_DATA_KEY} variable in the child request configuration (endpoint, query params or body). For example, endpoint: /api/path/${LW_PARENT_DATA_KEY}/additionalInfo.
|Child Data Path|The path to access a specific object within a child response. For example, to access a list of elements named with the key `objects`, the ChildDataPath would be `objects`. If not provided, the entire response body will be indexed.
|Child Data ID|The identifier key for the child data object, where the value is the solr-document's ID. Enter this when the `Custom Solr Field` is empty, otherwise the solr-document's ID will be a random universally unique identifier (UUID).
|Custom Solr Field|The field in which to store the child data within the root data objects. If not set, the child data object will be indexed as an individual solr-document.

|=======================

